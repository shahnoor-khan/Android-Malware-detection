
import numpy as np
from flask import Flask, request, render_template
import pickle
import pandas as pd


app = Flask(__name__)


model = pickle.load(open('model.pkl', 'rb'))
maxi = [6.21339e+05, 5.86480e+04, 5.91608e+05, 6.03560e+04, 1.42071e+05,
       1.29442e+05, 4.67000e+02, 3.27000e+02, 6.10000e+02, 9.00000e+00,
       5.55000e+02, 1.60000e+02, 1.07500e+03, 1.67000e+02, 3.69000e+02,
       1.07400e+03, 3.83000e+02, 1.90400e+03, 2.71300e+03, 4.48000e+02,
       3.90000e+02, 1.02000e+02, 1.29000e+02, 1.25000e+02, 8.00000e+01]

mini = [4.808e+03, 0.000e+00, 1.200e+01, 0.000e+00, 5.113e+03, 3.249e+03,
       2.000e+00, 2.100e+01, 6.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
       0.000e+00]

#use the route() decorator to tell Flask what URL should trigger our function.
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict',methods=['POST'])
def predict():

    int_features = [x for x in request.form.values()] 
    int_features = [float(x.strip()) for x in int_features]
    int_features = [(x-mini[i])/(maxi[i]-mini[i]) for i,x in enumerate(int_features)]

    features = [np.array(int_features)]  #Convert to the form [[a, b]] for input to the model
    prediction = model.predict(features)  # features Must be in the form [[a, b]]

    return render_template('index.html', prediction_text='{} malware'.format(prediction[0]))


@app.route('/data_predict',methods=['POST'])
def data_predict():

    int_features = [x for x in request.form.values()] 
    int_features = [x.strip() for x in int_features[0].split(' ')]
    int_features = list(set(int_features))
    try:
        int_features.remove('')
    except:
        pass
    int_features = [int(x) for x in int_features]
    print(int_features)

    df = pd.read_csv('dataset/android_malware.csv')
    try:
        df = df.loc[int_features]
        df = df.drop('Family', axis=1)
        print(df)
    except:
        return render_template('index.html')

    for i,col in enumerate(df.columns):
        df[col] = df[col].apply(lambda x : (x-mini[i])/(maxi[i]-mini[i]))
    prediction = model.predict(df.to_numpy())
    df['prediction'] = prediction
    return render_template("dataprediction.html", data=df.to_html())


if __name__ == "__main__":
    app.debug = True
    app.run()